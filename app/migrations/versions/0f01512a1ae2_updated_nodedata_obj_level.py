"""Updated NodeData, Obj, Level.

Revision ID: 0f01512a1ae2
Revises: 380bf9310436
Create Date: 2024-05-17 12:28:19.637067

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy import select
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '0f01512a1ae2'
down_revision = '380bf9310436'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('level', sa.Column('key_attrs', postgresql.ARRAY(sa.String()), server_default='{}', nullable=False))
    op.add_column('node_data', sa.Column('mo_active', sa.Boolean(), server_default=sa.text('true'), nullable=False))
    op.add_column('node_data', sa.Column('unfolded_key', postgresql.JSONB(astext_type=sa.Text()), server_default='{}', nullable=False))
    op.add_column('obj', sa.Column('active', sa.Boolean(), server_default=sa.text('true'), nullable=False))
    # ### end Alembic commands ###

    connection = op.get_bind()
    t_level = sa.Table('level', sa.MetaData(), autoload_with=connection, extend_existing=True)
    results = connection.execute(select(
        t_level.c.id,
        t_level.c.param_type_id,
    )).fetchall()
    for id_, param_type_id in results:
        # Split the existing name into first and last.
        key_attrs = [str(param_type_id)]
        # Update the new columns.
        connection.execute(t_level.update().where(t_level.c.id == id_).values(
            key_attrs=key_attrs,
        ))


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('obj', 'active')
    op.drop_column('node_data', 'unfolded_key')
    op.drop_column('node_data', 'mo_active')
    op.drop_column('level', 'key_attrs')
    # ### end Alembic commands ###
